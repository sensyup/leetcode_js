/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {boolean}
 */
 O(N*2)算法
var depth=function(root){
        if(root==null) return 0;
        else return Math.max(depth(root.left),depth(root.right))+1
    }
var isBalanced = function(root) {
    if(root==null) return true;
    
    if(Math.abs(depth(root.left)-depth(root.right))<=1&&isBalanced(root.left)&&isBalanced(root.right)) return true;
    
    return false;
    
    
};
O（N）算法

var depth=function(root){
    if(root==null) return 0;
    let left=depth(root.left);
    if(left==-1) return -1;
    let right=depth(root.right);
    if(right==-1) return -1;
    if(Math.abs(left-right)<=1) return Math.max(left,right)+1;
    else return -1;
}
var isBalanced = function(root) {
    return !(depth(root)==-1);
    
};
